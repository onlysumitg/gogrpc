package main

import (
	pb "gogrpc/greet/proto" // to access the code generated by gRPC
	"log"
	"net"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/reflection" // to use with evans cli for grpc
)

var addr string = "0.0.0.0:5051"

// this stuct will implement all gRPC endpoints
type Server struct {
	pb.GreetServiceServer // OPTIONAL interface for all required  gRPC functions for GreetService
}

func main() {

	// TCP listener
	listener, err := net.Listen("tcp", addr)

	if err != nil {
		log.Fatalf("Failed to listen to %v", err)
	}

	log.Printf("Listening on %s\n", addr)

	// server options

	opts := []grpc.ServerOption{}
	tsl := false // change to false for non SSL --> --> should be in sync with check tsl var in greet/client/main.go

	if tsl {
		certFile := "ssh/server.crt"
		keyFile := "ssh/server.pem"
		creds, err := credentials.NewServerTLSFromFile(certFile, keyFile)
		if err != nil {
			log.Fatalf("Error loading SSL certificate %v\n", err)

		}

		opts = append(opts, grpc.Creds(creds))
	}

	// build gRPC server
	gRPCServer := grpc.NewServer(opts...)

	// register the server for  GreetService from proto file
	pb.RegisterGreetServiceServer(gRPCServer, &Server{})

	reflection.Register(gRPCServer) // OPTIONAL interface for all required  gRPC functions for GreetService

	if err := gRPCServer.Serve(listener); err != nil {

	}
}
