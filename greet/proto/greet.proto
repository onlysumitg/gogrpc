syntax = "proto3";

// documentation
// https://developers.google.com/protocol-buffers/docs/proto3

// this is go package 
package greet;

// this is go module name from go.mod + location where we want the gRPC code
// we can use this string to import the code generated by gRPC
option go_package="gogrpc/greet/proto" ;

import "sqrt.proto";   // import other proto files

import "google/protobuf/empty.proto"; // give google.protobuf.Empty to return an empty object from API 




import "google/protobuf/any.proto";  // The Any message type lets you use messages as embedded types without having their .proto definition. An Any contains an arbitrary serialized message as bytes,

// message ErrorStatus {
//     string message = 1;
//     repeated google.protobuf.Any details = 2;  // <<<<< ANy
//   }
  

// ----------------------------------------------------------------------------------
// enum
//-----------------------------------------------------------------------------------
enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

message PhoneNumber {
    string number = 1;   //  You also cannot use the numbers 19000 through 19999 
    PhoneType type = 10;  // using enum
  }


// ----------------------------------------------------------------------------------
//  Nested message
//-----------------------------------------------------------------------------------
  message Person {

    reserved 12, 13, 9 to 11; // these field number are reserved and can not be use
    reserved "foo", "bar"; // these field names are reserved and can not be use



    reserved "foo", "bar";
  


    string name = 1;
    int32 id = 2;  // Unique ID number for this person.
    string email = 3;
  
    enum PhoneType {
      MOBILE = 0;
      HOME = 1;
      WORK = 2;
    }
  
    message PhoneNumber {
      string number = 1;
      PhoneType type = 2;
    }
  

    // If a field is repeated, the field may be repeated any number of times (including zero). 
    // The order of the repeated values will be preserved in the protocol buffer. 
    // Think of repeated fields as dynamically sized arrays. 
    repeated PhoneNumber phones = 4;

    //singular: a well-formed message can have zero or one of this field (but not more than one). When using proto3 syntax, this is the default field rule when no other field rules are specified for a given field. You cannot determine whether it was parsed from the wire. It will be serialized to the wire unless it is the default value. 

    //singular PhoneNumber phonesingular = 5;


    //optional: the same as singular, except that you can check to see if the value was explicitly set. An optional field is in one of two possible states:
    //  the field is set, and contains a value that was explicitly set or parsed from the wire. It will be serialized to the wire.
    //  the field is unset, and will return the default value. It will not be serialized to the wire.
     optional PhoneNumber phoneoptional = 6;
  

     //map: this is a paired key/value field type. 
     map<string,string> mapof = 2;



    google.protobuf.Timestamp last_updated = 15;
  }
  


  // You can nest messages as deeply as you like:
  message Outer {                  // Level 0
    message MiddleAA {  // Level 1
      message Inner {   // Level 2
        int64 ival = 1;
        bool  booly = 2;
      }
    }
    message MiddleBB {  // Level 1
      message Inner {   // Level 2
        int32 ival = 1;
        bool  booly = 2;
      }
    }
  }

  


// ----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
message Dummy {
    uint32 id = 1;
    map<string,string> mapof = 2;
}
// ----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
service DummyService {
    //rpc Dummy(Dummy) returns (google.protobuf.Empty);  // return empty object or ERROr ---> in case client does not neeed to get response back

    // no input param
    // stream to return multiple object like array
    // rpc Dummy2(google.protobuf.Empty) returns (stream string); 
}



// ----------------------------------------------------------------------------------
// Protocol buffer data is structured as messages, where each message is a small logical record of information containing a series of name-value pairs called fields. 
//-----------------------------------------------------------------------------------

// gRPC service input
message GreetRequest{
    string first_name=1; // semi coma is required
                         // 1 represents the sequence of the parameter
}

// ----------------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------------
// gRPC serice output
message GreetResponse{
    string result=1;  // semi-coma is required
}

// ----------------------------------------------------------------------------------
// You define gRPC services in ordinary proto files, with RPC method parameters and return types specified as protocol buffer messages:
//-----------------------------------------------------------------------------------

// gRPC service and exposed functions/procedures
service GreetService{

    // this is just a prototype
    // server need to implement this function


 
    // 1. Unary RPCs  ----------------------------------------------------------------------------------
    //      one call to the server returns one response
    //      there is no streaming from server side or client side
    rpc Greet(GreetRequest) returns (GreetResponse);


    // 2. Server streaming RPCs  ---------------------------------------------------------------------------------
    //      for one request , server can return multiple responses as stream
    rpc GreetManyTimes(GreetRequest) returns(stream GreetResponse);



    // 3. Client streaming RPCs  ---------------------------------------------------------------------------------
    //      client can send multiple request but server will return one response after client close the stream
    rpc LongGreet(stream GreetRequest) returns (GreetResponse);



    // 4. Bidirectional streaming RPCs  ---------------------------------------------------------------------------------
    //   both sides send a sequence of messages using a read-write stream. The two streams operate independently, 
    //   so clients and servers can read and write in whatever order they like
    rpc GreetEveryOne(stream GreetRequest) returns (stream GreetResponse);




    // EXCEPTION HANDLING ---------------------------------------------------------------------------------
    // server sends back a gRPC error with message and code
    // client check if its gRPC or non-gRPC error and act accordinly
    rpc Sqrt(SqrtRequest) returns (SqrtResponse);





    // DEADLINE ---------------------------------------------------------------------------------
    //  client sends a request DEADLINE 
    //  server need to send a response back before the DEADLINE expires
    rpc GreetWithDeadline(GreetRequest) returns (GreetResponse);




}


/*
to compile

$ protoc -I greet/proto --go_out=. --go_opt=module=gogrpc  --go-grpc_out=. --go-grpc_opt=module=gogrpc greet/proto/dummy.proto

-I => where to find import

--go_out => where to put the generated code 

--go_opt=module=gogrpc => tell proto to use this go module --> else it will create new folder


--go-grpc_out=. --go-grpc_opt=module=gogrpc 
    take => option go_package 
        replace value of "--go-grpc_opt=module" = gogrpc with value of "--go-grpc_out" = .

        gogrpc/greet/proto ==> ./greet/proto  --> generate grpc.pb.go file here


*/